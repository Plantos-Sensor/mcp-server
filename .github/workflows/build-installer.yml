name: Build Installers

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-macos:
    name: Build macOS Installer
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r installer/requirements.txt
          pip install pyinstaller

      - name: Verify MCP server source
        run: |
          # MCP server source should be in src/
          ls -la src/

      - name: Import Code Signing Certificate
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Clean up
          rm certificate.p12

      - name: Build unsigned (PR/dev)
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags/')
        run: |
          cd installer
          python build.py

      - name: Build and sign (release)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_APP_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NOTARIZE: "true"
        run: |
          cd installer
          python build.py --sign

      - name: Create DMG
        run: |
          # Install create-dmg
          brew install create-dmg

          # Create DMG
          create-dmg \
            --volname "Plantos MCP Installer" \
            --window-pos 200 120 \
            --window-size 600 400 \
            --icon-size 100 \
            --app-drop-link 450 185 \
            "installer/dist/PlantosMCPInstaller.dmg" \
            "installer/dist/PlantosMCPInstaller.app"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: |
            installer/dist/PlantosMCPInstaller.app
            installer/dist/PlantosMCPInstaller.dmg

  build-windows:
    name: Build Windows Installer
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r installer/requirements.txt
          pip install pyinstaller

      - name: Verify MCP server source
        run: |
          # MCP server source should be in src/
          dir src

      - name: Build installer
        run: |
          cd installer
          python build.py

      - name: Sign executable (release only)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        env:
          WINDOWS_CERTIFICATE_BASE64: ${{ secrets.WINDOWS_CERTIFICATE_BASE64 }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          # Decode certificate
          echo $env:WINDOWS_CERTIFICATE_BASE64 | Out-File -Encoding ASCII certificate.txt
          certutil -decode certificate.txt certificate.pfx

          # Sign executable
          & 'C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x64\signtool.exe' sign /f certificate.pfx /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 installer\dist\PlantosMCPInstaller.exe

          # Clean up
          Remove-Item certificate.txt, certificate.pfx

      - name: Create installer with Inno Setup
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          # TODO: Add Inno Setup script for Windows installer
          echo "Windows installer creation pending"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer/dist/PlantosMCPInstaller.exe

  build-linux:
    name: Build Linux Installer
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r installer/requirements.txt
          pip install pyinstaller

      - name: Verify MCP server source
        run: |
          # MCP server source should be in src/
          ls -la src/

      - name: Build installer
        run: |
          cd installer
          python build.py

      - name: Create AppImage
        run: |
          # TODO: Add AppImage creation
          echo "AppImage creation pending"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: installer/dist/PlantosMCPInstaller

  create-release:
    name: Create Release
    needs: [build-macos, build-windows, build-linux]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/macos-installer/PlantosMCPInstaller.dmg
            artifacts/windows-installer/PlantosMCPInstaller.exe
            artifacts/linux-installer/PlantosMCPInstaller
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
