name: Build and Release MCP Installer

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact_name: plantos-mcp-installer-macos.zip
            asset_name: plantos-mcp-installer-macos.zip
          - os: windows-latest
            artifact_name: plantos-mcp-installer-windows.zip
            asset_name: plantos-mcp-installer-windows.zip
          - os: ubuntu-latest
            artifact_name: plantos-mcp-installer-linux.tar.gz
            asset_name: plantos-mcp-installer-linux.tar.gz

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Import Code Signing Certificate (macOS)
        if: matrix.os == 'macos-latest'
        env:
          MACOS_CERTIFICATE: ${{ secrets.MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
        run: |
          # Create temporary keychain
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)

          # Decode certificate
          echo "$MACOS_CERTIFICATE" | base64 --decode > certificate.p12

          # Create keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Import certificate to keychain
          security import certificate.p12 -k "$KEYCHAIN_PATH" -P "$MACOS_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Add keychain to search list
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # Clean up certificate file
          rm certificate.p12

      - name: Build installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          chmod +x build.sh
          ./build.sh
        env:
          CODESIGN_IDENTITY: "Developer ID Application: Tyler Dennis (66872JU2N9)"

      - name: Cleanup Keychain (macOS)
        if: matrix.os == 'macos-latest' && always()
        run: |
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          security delete-keychain "$KEYCHAIN_PATH" || true

      - name: Build installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          .\build.bat

      - name: Build installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          chmod +x build.sh
          ./build.sh

      - name: Package installer (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          cd dist
          zip -r plantos-mcp-installer-macos.zip "Plantos MCP Installer.app"

      - name: Package installer (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd dist
          7z a plantos-mcp-installer-windows.zip plantos-mcp-installer.exe

      - name: Package installer (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          cd dist
          tar -czf plantos-mcp-installer-linux.tar.gz plantos-mcp-installer

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: dist/${{ matrix.artifact_name }}

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/plantos-mcp-installer-macos.zip/plantos-mcp-installer-macos.zip
            artifacts/plantos-mcp-installer-windows.zip/plantos-mcp-installer-windows.zip
            artifacts/plantos-mcp-installer-linux.tar.gz/plantos-mcp-installer-linux.tar.gz
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Plantos MCP Desktop Installer

            One-click installer to connect Plantos agricultural intelligence to Claude Desktop.

            ### Installation

            **macOS:**
            1. Download `plantos-mcp-installer-macos.zip`
            2. Unzip and open `Plantos MCP Installer.app`
            3. Follow the on-screen instructions

            **Windows:**
            1. Download `plantos-mcp-installer-windows.zip`
            2. Extract and run `plantos-mcp-installer.exe`
            3. Follow the on-screen instructions

            **Linux:**
            1. Download `plantos-mcp-installer-linux.tar.gz`
            2. Extract: `tar -xzf plantos-mcp-installer-linux.tar.gz`
            3. Run: `./plantos-mcp-installer`

            ### What's Included

            - üåæ Agricultural data analysis tools
            - üìä Crop yield predictions
            - üå± Soil health insights
            - üå§Ô∏è Weather data integration
            - üìà Market intelligence

            For more information, visit [plantos.co](https://plantos.co)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
